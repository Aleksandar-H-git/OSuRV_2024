#!/usr/bin/env python3
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT
'''

###############################################################################

import os
import glob
import waflib

###############################################################################

one_file_programs = [
	'js_wiper.c',
]

def options(opt):
	opt.load('gcc gxx')

	opt.add_option(
		'--app',
		dest='app',
		default=None,
		help='App to be run'
	)

def configure(cfg):
	cfg.load('gcc gxx')

	cfg.env.append_value('CFLAGS', ['-pthread'])
	cfg.env.append_value('LINKFLAGS', ['-pthread', '-lzmq'])
	cfg.env.append_value('CFLAGS', ['-g', '-rdynamic'])  # Debugging support

	# Add include path from the driver
	driver_include = cfg.srcnode.find_node('../Driver/gpio_ctrl')
	if driver_include:
		cfg.env.INCLUDES_USER = [driver_include.abspath()]
	else:
		cfg.fatal('Driver include directory not found: ../Driver/gpio_ctrl')

def build(bld):
	for source in one_file_programs:
		target_name, _ = os.path.splitext(source)
		bld.program(
			target=target_name,
			source=source,
			includes=bld.env.INCLUDES_USER,
			install_path=False
		)

def expand_app(app):
	suffixes = ['', '.exe', '.elf']
	prefixes = ['', 'app_', 'example_', 'test_']

	programs = []
	for g in glob.glob('build/*'):
		if os.path.isfile(g):
			base = os.path.split(g)[1]
			root, ext = os.path.splitext(base)
			if ext in suffixes:
				programs.append(base)

	possible_a = []
	for p in programs:
		for prefix in prefixes:
			if p.startswith(prefix + app):
				a, _ = os.path.splitext(p)
				possible_a.append(a)
	possible_a.sort()

	if len(possible_a) == 0 or app in possible_a:
		a = app
	else:
		a = possible_a[0]

	return os.path.join('build', a)

def run(ctx):
	if ctx.options.app:
		cmd = expand_app(ctx.options.app)
		ctx.exec_command2(cmd)

###############################################################################

def exec_command2(self, cmd, **kw):
	kw['stdout'] = None
	kw['stderr'] = None
	ret = self.exec_command(cmd, **kw)
	if ret != 0:
		self.fatal('Command "{}" returned {}'.format(cmd, ret))

setattr(waflib.Context.Context, 'exec_command2', exec_command2)

